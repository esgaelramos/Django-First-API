// ---> 35
pip install -r requeriments.txt

django-admin startproject profiles_project .

django-admin startapp profiles_api
o (python3 manage.py startapp profiles_api)
//DON'T USE '-', USE '_' FOR NAMES :) 
// ---> |>.<|

// ---> 34 
>>>settings.py
#ADD THE APPS AND REST-FRAMEWORK
    'rest_framework',
    'rest_framework.authtoken',

    'profiles_api',
##
#ADD DATABASE 
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'apiprofile',
        'USER': 'postgres',
        'PASSWORD': 'SEXYpsql!88',
        'HOST': '127.0.0.1',
        'DATABASE_PORT': '5432',
    }
##
#CHANGE ZONE AND LANGUAGE
    LANGUAGE_CODE = 'es-mx'

    TIME_ZONE = 'America/Mexico_City'
###

>>>requeriments.txt
#ADD LIB FOR PSQL PSYCOPG2
psycopg2==2.9.3
###
pip install requeriments.txt

#CREATE DATABASE PSQL
sudo -u postgres psql
****
****
=# CREATE DATABASE apiprofile;
=# \l
=# \dt
###
// ---> |>.<|

// ---> 33 
>>>models.py
#IMPORT FOR MODEL USER
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin

#CREATE MODEL USER

#We re-write the model default user, but we got one login with email and not only user:

class UserProfile(AbstractBaseUser, PermissionsMixin):
    """" MODEL DATABASE FOR USERS IN SYSTEM """
    email = models.EmailField(max_length=255, unique=True)
    name = models.CharField(max_length=20)
    #When user 'delete' his profile has a 'backup', because we only not show his profile, but never delete
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserProfileManager()
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']

    def get_full_name(self):
        return self.name
    
    def get_short_name(self):
        return self.name

    def __str__(self):
        """ RETURN STRING LIKE USER"""
        return self.email
###
// ---> |>.<|

// ---> 32
>>>models.py
#IMPORT FOR MODEL USER
from django.contrib.auth.models import BaseUserManager
#CREATE MODEL SUPER-USER

class UserProfileManager(BaseUserManager):
    """ MANAGER FOR MANAGE PROFILES USER """

    def create_user(self, email, name, password=None):
        """ CREATE NEW USER PROFILE """
        if not email:
            raise ValueError('User need email')
        
        email = self.normalize_email(email)
        user = self.model(email=email, name=name)

        user.set_password(password)
        user.save(using=self._db)

        return user

    def create_superuser(self, email, name, password):
        user = self.create_user(email, name, password)

        #is_superuser is default django with PermissionsMixin
        user.is_superuser = True
        user.is_staff = True
        user.save(using=self._db)

        return user
###
// ---> |>.<|

// ---> 31
>>>settings.py
#ADD FOR AUTH USER 
AUTH_USER_MODEL = 'profiles_api.UserProfile'
###
python3 manage.py makemigrations profiles_api
//only migrate UserProfile, why not UserProfileManager?, idk:(
python3 manage.py migrate
// ---> |>.<|

// ---> 30 
sudo -u postgres psql apiprofile
=# \l
=# \dt (Check if your model was created)

//CREATE A SUPER-USER
python3 manage.py createsuperuser
{
    esgaelramos@gmail.com
    Gael
    1234
    1234
}
//REGISTER THE MODEL
>>>admin.py
#IMPORT AND ADD MODEL VISIBLE IN ADMIN
from profiles_api import models

admin.site.register(models.UserProfile)
###
python3 manage.py runserver
(Check '/' and '/admin'; Check if you user profile has the password with hash;)
// ---> |>.<|


// ---> 29
>>>views.py
from rest_framework.views import APIView
from rest_framework.response import Response

# Create your views here.

class HelloAPIView(APIView):
    """ API VIEW OF TEST """
    
    def get(self, request, format=None):
        """ RETURN LIST PROPIETIS APIVIEW """
        an_apiview = [
            'WE USE METHODS HTTP LIKE FUNCTIONS (GET, POST, PATCH, PUT, DELETE)',
            'LIKE A TRADITIONAL VIEW',
            'BETTER CONTROL ABOUT APP LOGIC',
            'MANUAL MAPPING URLS'
        ]
        #Always we need a response in format JSON = dictionary
        return Response(({'message': 'Hello', 'an_apiview': an_apiview}))
###
// ---> |>.<|

// ---> 29
>>>profiles_project/urls.py
#ADD THE FILE URLS OF APP
from django.urls import path, include
    path('api/', include('profiles_api.urls'))
###
->Create a urls.py in the app
// ---> |>.<|

// ---> 28
#ADD AND CREATE THE URL OF APP
>>>profiles_api/urls.py
from django.urls import path

from profiles_api import views

urlpatterns = [
    path('hello-view/', views.HelloAPIView.as_view()),
]
###
(Check in runserver)
// ---> |>.<|

// ---> 28
It's a good practice has all serializer in one file
>>>profiles_api/serializer.py
#CREATE A SERIALIZER EXAMPLE
from rest_framework import serializers

class HelloSerializer(serializers.Serializer):
    """ EXAMPLE FOR SERIALIZER AND TEST APIVIEW """
    name = serializers.CharField(max_length=10)
###
// ---> |>.<|

// ---> 26
>>>profiles_api/serializer.py
//status tiene codigos html como respuestas api
>>>profiles_api/views.py
#IMPORT AND ADD CLASS SERIALIZER
from rest_framework import status

from profiles_api import serializers

    serializer_class = serializers.HelloSerializer
###
// ---> |>.<|

// ---> 26
>>>profiles_api/views.py
#CREATE A FUNCTION POST, WITH HIS ERROR AND MESSAGE
    def post(self, request):
        """ CREATE A MESSAGE WITH OUR NAME """
        serializer = self.serializer_class(data=request.data)

        if serializer.is_valid():
            name = serializer.validated_data.get('name')
            message = f'Hello {name}'
            return Response(({'message': message}))
        else:
            return Response(
                serializer.errors,
                status=status.HTTP_400_BAD_REQUEST
            )
###
'serializer.py' to 'serializers.py'
(name) to {name}
(Check runserver /api/hello-view, the POST)
// ---> |>.<|

// ---> 25
>>>profiles_api/views.py
#ADD PUT()
    def put(self, request, pk=None):
        """ MANAGER: UPDATE A OBJECT"""
        return Response({'method': 'PUT'})
###
// ---> |>.<|

// ---> 25
>>>profiles_api/views.py
#ADD PATCH()
    def patch(self, request, pk=None):
        """ MANAGER: PARTIAL UPDATE A OBJECT """
        return Response({'method': 'PATCH'})  
###
// ---> |>.<|

// ---> 25
>>>profiles_api/views.py
#ADD DELETE()
    def delete(self, request, pk=None):
        """ MANAGER: DELETE A OBJECT """
        return Response({'method': 'DELETE'}) 
###
// ---> |>.<|

CHECK WITH RUNSERVER
AND THE END! :)
I NEED MORE PRACTICE